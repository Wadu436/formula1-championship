# Generated by Django 4.0.2 on 2022-02-22 16:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('leaderboard', '0042_raceentry_raceentry_unique_driver_race_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SprintRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('championship_order', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('date_time', models.DateTimeField(blank=True, null=True)),
                ('finished', models.BooleanField(default=False)),
                ('wet_race', models.BooleanField(default=False)),
                ('length', models.CharField(choices=[('F', 'Full Race (100%)'), ('L', 'Long Race (50%)'), ('M', 'Medium Race (25%)'), ('S', 'Short Race (5 laps)')], max_length=1)),
                ('championship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprintraces', to='leaderboard.championship')),
                ('driver_of_the_day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='sprint_driver_of_the_day_set', to='leaderboard.driver')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='sprintraces', to='leaderboard.track')),
            ],
            options={
                'ordering': ('championship', 'championship_order'),
            },
        ),
        migrations.CreateModel(
            name='SprintRaceEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot', models.BooleanField(default=False, verbose_name='Is Bot')),
                ('finish_position', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('best_lap_time', models.DurationField(blank=True, null=True)),
                ('dnf', models.BooleanField(default=False, verbose_name='Did Not Finish')),
                ('tires', models.CharField(blank=True, max_length=32, null=True)),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='sprint_race_entries', to='leaderboard.driver')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprint_race_entries', to='leaderboard.sprintrace')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='sprint_race_entries', to='leaderboard.team')),
            ],
            options={
                'ordering': ('race', 'finish_position'),
            },
        ),
        migrations.CreateModel(
            name='SprintDNAEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='sprint_dna_entries', to='leaderboard.driver')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprint_dna_entries', to='leaderboard.sprintrace')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='sprint_dna_entries', to='leaderboard.team')),
            ],
            options={
                'ordering': ('race',),
            },
        ),
        migrations.AddConstraint(
            model_name='sprintraceentry',
            constraint=models.UniqueConstraint(fields=('race', 'driver'), name='sprintraceentry_unique_driver_race'),
        ),
        migrations.AddConstraint(
            model_name='sprintraceentry',
            constraint=models.UniqueConstraint(fields=('race', 'finish_position'), name='sprintraceentry_unique_driver_finish_position'),
        ),
        migrations.AddConstraint(
            model_name='sprintraceentry',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('bot', True), ('driver__isnull', True), ('team__isnull', True)), models.Q(('bot', False), ('driver__isnull', False)), _connector='OR'), name='sprintraceentry_dna_notnull'),
        ),
    ]
